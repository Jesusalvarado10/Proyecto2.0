/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package MainUI;

import Bedroom.Bedroom;
import HashTable.HashTable;
import Lista.Lista;
import Reservation.Reservation;
import User.User;
import java.io.FileInputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author User
 */
public class MainUI extends javax.swing.JFrame {

    HashTable b;

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
        b = new HashTable(2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(173, 83, -1, -1));

        jButton1.setText("jButton1");
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public void leerExcel() {
        try {
            //abrimos el XSSFWorkbook
            FileInputStream f = new FileInputStream("C:\\Users\\User\\Desktop\\Trabajo.xlsx");
            XSSFWorkbook libro = new XSSFWorkbook(f);

//            //seleccionamos la primera hoja
//            XSSFSheet hoja = libro.getSheetAt(0);
//
//            //Cogemos todas las filas de esa hoja
//            Iterator<Row> filas = hoja.iterator();
//            Iterator<Cell> columnas;
//
//            Row fila;
//            Cell columna;
//            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
//            //recorremos las filas
//            Lista reservaciones = new Lista();
//            fila = filas.next();
//
//            while (filas.hasNext()) {
//                int n = 0;
//                //Cogemos la siguiente fila
//                fila = filas.next();
//
//                //Cogemos todas las celdas de esa fila
//                columnas = fila.cellIterator();
//                int dni = 0;
//                String name = "";
//                String last_name = "";
//                String gener = "";
//                String email = "";
//                String phone = "";
//                String ride = "";
//                String departure = "";
//                String type="";
//
//                //REcorremos todas las celdas
//                while (columnas.hasNext()) {
//                    n++;
//                    //Cogemos la siguiente fila
//                    columna = columnas.next();
//
//                    //Segun el tipo de celda, usaremos uno u otra funcion
//                    if (n == 1) {
//                        double i = columna.getNumericCellValue();
//                        String value = String.valueOf(i);
//                        value = value.replace(".", "");
//                        value = value.replace("E7", "");
//                        dni = Integer.parseInt(value);
//                        System.out.println(value);
//                    } else if (n == 2) {
//                        name = columna.getStringCellValue();
//                        System.out.println(columna.getStringCellValue());
//
//                    } else if (n == 3) {
//                        last_name = columna.getStringCellValue();
//                        System.out.println(columna.getStringCellValue());
//                    } else if (n == 4) {
//                        email = columna.getStringCellValue();
//                        System.out.println(columna.getStringCellValue());
//                    } else if (n == 5) {
//                        gener = columna.getStringCellValue();
//                        System.out.println(columna.getStringCellValue());
//                    } else if (n == 6) {
//                        type=columna.getStringCellValue();
//                        System.out.println(columna.getStringCellValue());
//                    } else if (n == 7) {
//                        phone = columna.getStringCellValue();
//                        System.out.println(columna.getStringCellValue());
//                    } else if (n == 8) {
//                        String a = String.valueOf(columna.getDateCellValue());
//                        ride = a;
//
//                        System.out.println("Fecha: " + a);
//                    } else {
//                        String a = String.valueOf(columna.getDateCellValue());
//                        departure = a;
//                        System.out.println("Fecha: " + a);
//                    }
//
//                }
//                User u= new User(dni,  name,  last_name,  gener,  email,  phone);
//                u.setRide(ride);
//                u.setDeparture(departure);
//                Reservation r= new Reservation (u,type);
//                reservaciones.addLast(r);
//            }
            Bedroom[] habs = Habitaciones(libro);

            HashTable statusHabs = status(libro, habs);
            this.b = statusHabs;

//           System.out.println(u.getNum());
            //cerramos el libro
        } catch (Exception e) {
            System.out.print("Error");

        }
    }

    public Bedroom[] Habitaciones(XSSFWorkbook libro) {
        XSSFSheet hoja = libro.getSheetAt(1);

        //Cogemos todas las filas de esa hoja
        Iterator<Row> filas = hoja.iterator();
        Iterator<Cell> columnas;

        Row fila;
        Cell columna;
        Lista habitaciones = new Lista();
        int o = 0;

        while (filas.hasNext()) {
            int n = 0;
            //Cogemos la siguiente fila
            fila = filas.next();

            //Cogemos todas las celdas de esa fila
            columnas = fila.cellIterator();
            String type = "";
            int piso = 0;
            String x = "";

            //REcorremos todas las celdas
            while (columnas.hasNext()) {
                n++;
                //Cogemos la siguiente fila
                columna = columnas.next();
                //Segun el tipo de celda, usaremos uno u otra funcion
                if (o != 0) {
                    if (n == 2) {
                        type = columna.getStringCellValue();
//                        System.out.println(columna.getStringCellValue());
                    } else if ((columna.getCellType() == CellType.NUMERIC) && (n == 3)) {
                        double i = columna.getNumericCellValue();
                        piso = (int) i;
//                        System.out.println(piso);

                    } else {
                        continue;
                    }
                }
            }
            if (o != 0) {
                Bedroom b = new Bedroom(type, piso);
                habitaciones.addLast(b);
            }
            o++;
        }
        Bedroom habs[] = new Bedroom[(int) habitaciones.size()];

        for (int i = 0; i < habitaciones.size(); i++) {

            habs[i] = (Bedroom) habitaciones.getValuePosition(i);
        }
        return habs;

    }

    public HashTable status(XSSFWorkbook libro, Bedroom habs[]) {
        XSSFSheet hoja = libro.getSheetAt(2);
        HashTable b = new HashTable(habs.length);
        //Cogemos todas las filas de esa hoja
        Iterator<Row> filas = hoja.iterator();
        Iterator<Cell> columnas;

        Row fila;
        Cell columna;
        int o = 0;

        while (filas.hasNext()) {
            int n = 0;
            //Cogemos la siguiente fila
            fila = filas.next();

            //Cogemos todas las celdas de esa fila
            columnas = fila.cellIterator();
            String name = "";
            String last_name = "";
            String gener = "";
            String email = "";
            String phone = "";
            String ride = "";
            int num = 0;
            //REcorremos todas las celdas
            while (columnas.hasNext()) {
                n++;

                //Cogemos la siguiente fila
                columna = columnas.next();
                //Segun el tipo de celda, usaremos uno u otra funcion
                if (o != 0) {

                    if (n == 1) {
                        num = (int) columna.getNumericCellValue();
                        System.out.println(num);

                    } else if (n == 2) {
                        name = columna.getStringCellValue();
//                        System.out.println(columna.getStringCellValue());

                    } else if (n == 3) {
                        last_name = columna.getStringCellValue();
//                        System.out.println(columna.getStringCellValue());
                    } else if (n == 4) {
                        email = columna.getStringCellValue();
//                        System.out.println(columna.getStringCellValue());
                    } else if (n == 5) {
                        gener = columna.getStringCellValue();
//                        System.out.println(columna.getStringCellValue());
                    } else if (n == 6) {
                        phone = columna.getStringCellValue();
//                        System.out.println(columna.getStringCellValue());
                    } else if (n == 7) {
                        String a = String.valueOf(columna.getDateCellValue());
                        ride = a;

//                        System.out.println("Fecha: " + a);
                    }
                }
            }
            if (o != 0) {

                User u = new User(name, last_name, gener, email, phone);
                u.setRide(ride);
                u.setNum(num);

                habs[num - 1].setOccupied(true);
                b.insert(u);

            }
            o++;

        }
        return b;
    }

    public void pruebas() {
        User u = (User) this.b.search("Tom", "Kew");
        u.show();
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
